package polymorphism;
/*
 * 面向对象特征之三：多态性
 * 1.理解多态性：可以理解为一个事物的多种形态
 * 2.和为多态性：
 * 			对象的多态性：父类的引用指向子类的对象（左边是父类，右边是子类的对象）
 * 3.堕胎的使用：虚拟方法调用
 * 			有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但是在运行期，我们实际调用的是
 * 				子类重写父类的方法
 * 总结：编译看左边，运行看右边（只适用于方法）
 * 4.多态性的使用前提：1.类的继承关系2.方法的重写
 * 5.对象的多态性：只适用于方法，不适用于属性，输出属性时，父类是啥，就输出啥
 * 总结：对于属性：编译运行都看左边
 */
public class PersonTest {
	public static void main(String[] args) {
		Person p1=new Person();
		p1.eat();
		
		Man man=new Man();
		man.eat();
		man.age=23;
		man.earnMoney();
		System.out.println("-------------------多态性-----------------");
		//对象的多态性：父类的引用指向子类的对象
		Person p2=new Man();
		
		Person p3=new Woman();
		//多态的使用：当调用子类同名参数的方法时，实际执行的是子类重写父类的方法--虚拟方法调用
		p2.eat(); 
		p2.walk();
		//编译的时候是按照Person来编译，运行时是按照Man来运行
		//p2.earMoney();
	}
}
